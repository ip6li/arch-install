---
- hosts: all
  tasks:
    - name: Abort if the host is not booted from the Arch install media
      fail:
        msg: "This host is not booted from the Arch install media!"
      when: ansible_nodename != 'archiso'
      tags:
        - quick_exit

    - name: Synchronize clock via NTP
      command: timedatectl set-ntp true
      tags:
        - sync_clock

    - name: Repartition install drive
      block:
        - name: Wipe install drive and all its partitions
          command: find /dev -wholename "{{ install_drive }}*" -exec wipefs --force --all {} \;
          tags:
            - wipefs
        - name: Create boot partition
          parted:
            device: '{{ install_drive }}'
            label: msdos
            number: 1
            part_end: 1024MB
            flags: [boot]
            state: present
        - name: Create lvm partition
          parted:
            device: '{{ install_drive }}'
            label: msdos
            number: 2
            part_start: 1024MB
            flags: [lvm]
            state: present
      tags:
        - repartition

    - name: Setup LUKS encryption for root filesystem
      block:
        - name: Copy keyfile
          copy:
            src: '{{ luks_keyfile }}'
            dest: /root/keyfile
        - name: Destroy existing LUKS volume
          luks_device:
            device: '{{ install_drive }}{{ root_partition_suffix }}'
            state: absent
        - name: Create and open LUKS volume
          luks_device:
            device: '{{ install_drive }}{{ root_partition_suffix }}'
            keyfile: /root/keyfile
            name: luks-sda2
            state: opened
        - name: Get UUID for root LUKS volume
          command: blkid -s UUID -o value '{{ install_drive }}{{ root_partition_suffix }}'
          register: root_luks_uuid
          changed_when: false
      tags:
        - luks

    - name: Setup LVM root and tmp volumes
      block:
        - name: Remove existing volume group
          lvg:
            vg: vg0
            force: yes
            state: absent
        - name: Configure volume group
          lvg:
            vg: vg0
            pvs:
              - /dev/mapper/luks-sda2
        - name: Configure logical volumes
          lvol:
            vg: vg0
            lv: '{{ item.lv }}'
            size: '{{ item.size }}'
          loop:
            - {lv: root, size: 20g}
            - {lv: usr, size:  30g}
      tags:
        - lvm

    - name: Setup LVM Config
      lineinfile:
        dest: /mnt/etc/lvm/lvm.conf
        regexp: '{{ item.regex }}'
        line: '{{ item.line }}'
      loop:
        - {regex: issue_discards = 0, line: issue_discards = 1}
      
    - name: Create filesystems
      block:
        - name: Create ext4 filesystem in boot partition
          filesystem:
            dev: '{{ install_drive }}{{ boot_partition_suffix }}'
            fstype: ext4
            force: yes
        - name: Create ext4 filesystem in root volume
          filesystem:
            dev: /dev/vg0/root
            fstype: ext4
            force: yes
        - name: Create ext4 filesystem in usr volume
          filesystem:
            dev: /dev/vg0/usr
            fstype: ext4
            force: yes
        - name: Get UUID for boot filesystem
          command: blkid -s UUID -o value '{{ install_drive }}{{ boot_partition_suffix }}'
          register: boot_uuid
          changed_when: false
        - name: Get UUID for root filesystem
          command: blkid -s UUID -o value /dev/vg0/root
          register: root_uuid
          changed_when: false
        - name: Get UUID for usr filesystem
          command: blkid -s UUID -o value /dev/vg0/usr
          register: usr_uuid
          changed_when: false
      tags:
        - create_filesystems


    - name: Mount filesystems
      block:
        - name: Mount root filesystem
          mount:
            path: /mnt
            src: UUID={{ root_uuid.stdout }}
            fstype: ext4
            state: mounted
        - name: Create mountpoint for boot volume
          file:
            path: /mnt/boot
            state: directory
        - name: Create mountpoint for usr volume
          file:
            path: /mnt/usr
            state: directory
        - name: Mount boot filesystem
          mount:
            path: /mnt/boot
            src: UUID={{ boot_uuid.stdout }}
            fstype: ext4
            state: mounted
        - name: Mount usr filesystem
          mount:
            path: /mnt/usr
            src: UUID={{ usr_uuid.stdout }}
            fstype: ext4
            state: mounted
      tags:
        - mount_filesystems

    - name: Rank Arch mirrors
      block:
        - name: Install the pacman-contrib package (for rankmirrors)
          pacman:
            name:
              - pacman-contrib
            update_cache: yes
        - name: Use rankmirrors to filter the fastest mirrors that support HTTPS
          shell: curl -s "https://www.archlinux.org/mirrorlist/?country=US&protocol=https&use_mirror_status=on" | sed -e 's/^#Server/Server/' -e '/^#/d' | rankmirrors -n 5 - > /etc/pacman.d/mirrorlist
      tags:
        - mirrors

    - name: Run pacstrap
      command: pacstrap /mnt base dhclient dhcpcd grub linux linux-firmware lvm2 mdadm cryptsetup netctl dropbear openssh python sudo mkinitcpio-dropbear mkinitcpio-netconf mkinitcpio-nfs-utils mkinitcpio-utils
      tags:
        - pacstrap
    - name: Generate fstab
      block:
        - name: Generate blank fstab
          command: genfstab -U /mnt >> /mnt/etc/fstab
        - name: Add root volume to fstab
          mount:
            fstab: /mnt/etc/fstab
            path: /
            src: UUID={{ root_uuid.stdout }}
            fstype: ext4
            opts: defaults
            passno: '1'
            state: present
        - name: Add boot volume to fstab
          mount:
            fstab: /mnt/etc/fstab
            path: /boot
            src: UUID={{ boot_uuid.stdout }}
            fstype: ext4
            opts: defaults
            passno: '2'
            state: present
        - name: Add usr volume to fstab
          mount:
            fstab: /mnt/etc/fstab
            path: /usr
            src: UUID={{ usr_uuid.stdout }}
            fstype: ext4
            opts: defaults
            passno: '2'
            state: present
      tags:
        - fstab

    - name: Set local timezone
      command: arch-chroot /mnt ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime
      tags:
        - timezone
    - name: Generate adjtime file
      command: arch-chroot /mnt hwclock --systohc
      tags:
        - adjtime

    - name: Setup locales
      block:
        - name: Configure locale.gen
          lineinfile:
            dest: /mnt/etc/locale.gen
            regexp: '{{ item.regex }}'
            line: '{{ item.line }}'
          loop:
            - {regex: de_DE\.UTF-8 UTF-8, line: de_DE.UTF-8 UTF-8}
            - {regex: de_DE ISO-8859-1, line: de_DE ISO-8859-1}
        - name: Create locale.conf
          copy:
            content: "LANG=de_DE.UTF-8"
            dest: /mnt/etc/locale.conf
        - name: Generate locales
          command: arch-chroot /mnt locale-gen
      tags:
        - locales

    - name: Set hostname
      copy:
        content: '{{ inventory_hostname }}'
        dest: /mnt/etc/hostname
      tags:
        - hostname

    - name: Setup netctl
      block:
        - name: Create netctl profile for wired connection
          copy:
            content: |
              Description='Wired with DHCP'
              Interface={{ wired_interface }}
              Connection=ethernet
              IP=dhcp
              IP6=dhcp-noaddr
              # IPv6 traffic is tunneled over IPv4, which eats 20 bytes of the MTU.
              ExecUpPost='/usr/bin/ip link set {{ wired_interface }} mtu 1480'
            dest: /mnt/etc/netctl/wired
        - name: Enable wired netctl profile
          command: arch-chroot /mnt netctl enable wired
      tags:
        - netctl

    - name: Enable sshd
      command: arch-chroot /mnt systemctl enable sshd
      tags:
        - sshd

    - name: Setup SSH
      block:
      - name: Generate ED25519 key
        shell: echo -e 'y\n' | ssh-keygen -q -N "" -t ed25519 -f /mnt/etc/ssh/ssh_host_ed25519_key
      - name: Copy ED25519 key
        shell: cat /mnt/etc/ssh/ssh_host_ed25519_key > /mnt/tmp/hostkey ; chmod og-rwx /mnt/tmp/hostkey
      - name: Pem ED25519 key
        shell: ssh-keygen -m PEM -q -N "" -p -f /mnt/tmp/hostkey
      - name: Convert ED25519 key to Dropbear
        shell: dropbearconvert openssh dropbear /mnt/tmp/hostkey /mnt/etc/dropbear/dropbear_ecdsa_host_key
      - name: Generate RSA key
        shell: echo -e 'y\n' | ssh-keygen -q -N "" -t rsa -b 4096 -f /mnt/etc/ssh/ssh_host_rsa_key
      - name: Copy RSA key
        shell: cat /mnt/etc/ssh/ssh_host_rsa_key > /mnt/tmp/hostkey ; chmod og-rwx /mnt/tmp/hostkey
      - name: Pem RSA key
        shell: ssh-keygen -m PEM -q -N "" -p -f /mnt/tmp/hostkey
      - name: Convert RSA Key to Dropbear
        shell: dropbearconvert openssh dropbear /mnt/tmp/hostkey /mnt/etc/dropbear/dropbear_rsa_host_key
      - name: Clean keys
        file:
          state: absent
          path: /mnt/tmp/hostkey
      - name: Copy over ssh key from current Ansible controller as an authorized key
        copy:
          src: '{{ lookup("env", "HOME") }}/.ssh/id_rsa.pub'
          dest: /mnt/etc/dropbear/root_key
      tags:
        - sshd

    - name: Set up initramfs
      block:
        - name: Add mkinitcpio.conf hooks
          lineinfile:
            dest: /mnt/etc/mkinitcpio.conf
            regexp: ^HOOKS=
            line: HOOKS=(base udev autodetect keyboard keymap consolefont modconf block mdadm_udev netconf dropbear encryptssh lvm2 filesystems usr fsck)
        - name: Create new initramfs
          command: arch-chroot /mnt mkinitcpio -p linux
      tags:
        - initramfs
        - mkinitcpio

    - name: Set up grub
      block:
        - name: Add commandline information to grub config
          lineinfile:
            dest: /mnt/etc/default/grub
            regexp: ^GRUB_CMDLINE_LINUX=
            #line: GRUB_CMDLINE_LINUX="cryptdevice=UUID={{ root_luks_uuid.stdout }}:root root=/dev/mapper/root"
            line: GRUB_CMDLINE_LINUX="cryptdevice=UUID={{ root_luks_uuid.stdout }}:luks-sda2 ip={{ ansible_host }}::{{ gateway }}:{{ netmask }}:initramfs:eth0:none"
        - name: Install grub
          command: arch-chroot /mnt grub-install '{{ install_drive }}'
        - name: Create grub config
          command: arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
      tags:
        - grub

    - name: Setup user account
      block:
        - name: Create user account
          command: arch-chroot /mnt useradd --create-home --user-group --groups wheel {{ user_name }} --password {{ user_password }}
        - name: Create user's ssh directory
          file:
            path: /mnt/home/{{ user_name }}/.ssh
            state: directory
        - name: Set mode, owner, and group on user's ssh directory
          command: arch-chroot /mnt {{ item }}
          loop:
            - chmod 0700 /home/{{ user_name }}/.ssh
            - chown {{ user_name }}:{{ user_name }} /home/{{ user_name }}/.ssh
        - name: Copy over ssh key from current Ansible controller as an authorized key
          copy:
            src: '{{ lookup("env", "HOME") }}/.ssh/id_rsa.pub'
            dest: /mnt/home/{{ user_name }}/.ssh/authorized_keys
        - name: Set mode, owner, and group on user's authorized_key file
          command: arch-chroot /mnt {{ item }}
          loop:
            - chmod 0600 /home/{{ user_name }}/.ssh/authorized_keys
            - chown {{ user_name }}:{{ user_name }} /home/{{ user_name }}/.ssh/authorized_keys
      tags:
        - user_account

    - name: Give passwordless sudo access to wheel group
      copy:
        content: '%wheel ALL=(ALL) NOPASSWD: ALL'
        dest: /mnt/etc/sudoers.d/wheel
        validate: /usr/sbin/visudo --check --file=%s
      tags:
        - sudo

    - name: Set keyboard layout
      copy:
        src: ./vconsole.conf
        dest: /mnt/etc/vconsole.conf
        owner: root
        group: root
        mode: '0644'
      tags:
        - set_keyboard

#    - name: Reboot
#      reboot:
#        connect_timeout: 1
#        reboot_timeout: 1
#      failed_when: false
#      tags:
#        - reboot

